.chapter(data-title='Click-to-Call')
  .step(data-title='How it Works')
    :markdown
      ## How It Works

      Let's go over the steps necessary to implement click-to-call in our application:

      ![Click-to-call Diagram](//s3-us-west-2.amazonaws.com/deved/clicktocall.png)

      1. A website visitor wants to connect to your organization. The customer submits a web form with her phone number to receive a call connecting
      her to your sales or support team.

      1. Your web application receives the form submission. An HTTP request is initiated from your application to Twilio to initiate an outbound call.

      1. Twilio receives the request and initiates a call to the customer's phone number.

      1. Customer receives the call.

      1. After the call connects, Twilio asks our application for [TwiML instructions](/docs/api/twiml). Our TwiML instructs Twilio to connect the customer
      to our sales or support teams.

      ## What We Will Learn

      This How-To demonstrates initializing a call using the [Twilio REST API][rest] and creating TwiML call logic using the [Say][say] and [Dial][dial] verbs.

      Sound like a plan? Let's get started!

      [rest]: /docs/api/rest/
      [dial]: /docs/api/twiml/dial
      [say]: /docs/api/twiml/say

  .step(data-title="Application Overview", data-file='ClickToCall.Web/Controllers/CallCenterController.cs')
    :markdown
      ## Our ASP.NET MVC Application

      In this example, we're using the [ASP.NET MVC](http://www.asp.net/mvc/overview/getting-started) above [Microsoft.Net Framework](https://www.microsoft.com/net).
      ASP.NET MVC is a popular, robust web framework that provides HTTP request routing, server-side HTML rendering, model creation/validation and a
      configurable middleware stack to process incoming requests.

      To run this application locally, you can download it from [GitHub](https://github.com/TwilioDevEd/clicktocall-csharp) or cloning it in your desktop
      with git like this:
      ```
      git clone git@github.com:TwilioDevEd/clicktocall-csharp.git
      ```
      After extracting the app to a local directory, you can open `ClickToCall.Web.sln` file from Visual Studio 2015 and hit `Ctrl + F5`,
      that will build the solution, not before install all the [Nuget Packages](https://www.nuget.org/) dependencies(including the Twilio ones) and finally it will
      open a window of your default web browser with the Click-to-Call Application up and running.

      Now we need to configure our application with our Twilio account information.

      **See Also:**

      * [The Twilio C# Helper Library](//www.twilio.com/docs/csharp/install)

  .step(data-title='Environment', data-file='ClickToCall.Web/Web.config', data-highlight="19-22", data-mode="xml")
    :markdown
      ## Configuring our Application

      To get started you should create a Local.config file under the `ClickToCall.Web/` directory with the following content:
      ```
        <?xml version="1.0" encoding="utf-8"?>
        <appSettings>
          <add key="TwilioAccountSID" value="your_account_SID" />
          <add key="TwilioAuthToken" value="your_twilio_auth_token" />
          <add key="TwilioNumber" value="your_twilio_number" />
          <add key="TestDomain" value="<your-ngrok-subdomain>.ngrok.io"/>
        </appSettings>
      ```
      You can find your Twilio credentials in your [Account Dashboard](/user/account). 

      Feel free to replace the `TestDomain` value with a public url of your test environment but [we recommend using ngrok to solve this problem](https://www.twilio.com/blog/2015/09/6-awesome-reasons-to-use-ngrok-when-testing-webhooks.html). You can get more info about **ngrok** and how to get your ngrok's subdomain once you're using it
      [here](//www.twilio.com/blog/2013/10/test-your-webhooks-locally-with-ngrok.html)

      Now let's look at how we build our click-to-call app.

  .step(data-file='ClickToCall.Web/Views/CallCenter/Index.cshtml', data-mode="html")
    :markdown
      ## The Web Form

      Here we can see that we set up a form to accept the user's phone number.  The form doesn't have an `action` or `method` defined in markup, since we plan on submitting the form via JavaScript.

      Let's look at the JavaScript we use to submit the form.
  .step(data-file='ClickToCall.Web/Scripts/app.js', data-highlight="3-7")
    :markdown
      ## Creating a Better Phone Input

      Immediately on the document ready event, we use [a jQuery plugin](https://github.com/Bluefieldscom/intl-tel-input) to create an input field that will validate phone numbers and help insert proper country codes for the phone number our user enters.

      This step is not strictly necessary, but validating a user's phone number input on the client side is generally a good idea.

  .step(data-file='ClickToCall.Web/Scripts/app.js', data-highlight="11-33")
    :markdown
      ## Submit the form with Ajax

      Here, we are capturing the form's `submit` event, and sending an AJAX POST request to our MVC application.

      On line 14, we prevent the browser from following its default submit behavior.  On line 17, we use jQuery's AJAX function to send an HTTP POST request to `/call` on our server, containing the phone number the user entered as a form-encoded POST parameter. When the request completes, we simply display an alert containing the message we get back, as JSON, from the server.

      That's pretty much it for the front-end - let's take a look at the C# code that contains the logic behind the `/call` route.
  .step(data-file='ClickToCall.Web/Controllers/CallCenterController.cs', data-highlight="34-54")
    :markdown
      ## Outbound Call Route

      Back on the server, we define a route that handles HTTP POST requests to
      the `/call` URL. This is the code that we're calling via our AJAX
      request in the browser. It will be responsible for placing the outbound
      call.

      Before we place the call we check that the POST data is valid, which
      requires our `Contact` model has a phone number present.

      Next we'll use the REST API to [make an outgoing phone
      call](/docs/api/rest/making-calls) which requires we pass it a *From
      number*(`origin`), a *To number*(`destination`) and the [*URL
      Parameter*](/docs/api/rest/making-calls#url-parameter) (`handleUri`)
      that tells Twilio what to do after it connects the call to our customer.

      **See Also:**

      * [Twilio .NET Helper Library](https://github.com/twilio/twilio-csharp)

  .step(data-file='ClickToCall.Web/Controllers/CallController.cs', data-highlight="25-36")
    :markdown
      ## TwiML Route

      The first thing we do is validate that the incoming request is coming from Twilio. For this we'll use a Twilio Validation Service implemented by us using the Twilio .NET Helper Library's
      `RequestValidator`class.

      TwiML is a set of [simple verbs](/docs/api/twiml#verbs), written in XML, that Twilio reads as instructions. In this case our instructions inform
      Twilio to simply SAY something to the customer and then HANGUP. In a real world case, we would tell Twilio he that needs to DIAL in the Sales Agent
      once the call has been placed.

      Twilio expects instructions in TwiML, a set of [simple verbs](/docs/api/twiml#verbs) that Twilio understands. Luckily all of the helper libraries
      have methods that generate TwiML for you. In this case, we use Twilio .NET Helper Library's to create a TwiML response that will `Say` something and then `Hangup`.

  .step(data-title='Where to Next?')
    :markdown
      ## Where to Next?

      Congrats! You just learned how to build a working Click-to-Call solution. To improve upon this you could add [two-factor authentication](//www.twilio.com/docs/howto/walkthrough/two-factor-authentication/csharp/mvc) to your app,
      or create an [interactive survey](//www.twilio.com/docs/howto/walkthrough/automated-survey/csharp/mvc) to follow-up with your customer.

      Thanks for checking out this tutorial! If you have any feedback to share with us, we'd love to hear it.
      Tweet [@twilio](http://twitter.com/twilio) to let us know what you think.

      If you're a .NET developer working with Twilio, you might enjoy these
      other tutorials:

      [**Appointment Reminders**](//www.twilio.com/docs/tutorials/walkthrough/appointment-reminders/csharp/mvc)

      Automate the process of reaching out to your customers in advance of an upcoming appointment.

      [**Automated Survey**](//www.twilio.com/docs/tutorials/walkthrough/automated-survey/csharp/mvc)

      Instantly collect structured data from your customers with a survey conducted
      over a voice call or SMS text messages.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback to share with us, we'd love to hear it.
      Tweet [@twilio](http://twitter.com/twilio) to let us know what you think.
