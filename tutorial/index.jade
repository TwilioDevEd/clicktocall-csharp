.chapter(data-title='Click-to-Call')
  .step(data-title='How it Works', data-file='ClickToCall.Web/Controllers/CallController.cs')
    :markdown
      ## How It Works

      Let's go over the steps necessary to implement click-to-call in our application:

      ![Click-to-call Diagram](//s3-us-west-2.amazonaws.com/deved/clicktocall.png)

      1. A website visitor wants to connect to your organization.  She submits a web form with her
      phone number to receive a call connecting her to your sales or support team.

      1. Your web application receives the submission form.  An HTTP request is initiated from your
      application to Twilio to initiate an outbound call.

      1. Twilio receives the request and initiates a call to the user's phone number.

      1. User receives the call.

      1. After the call connects, Twilio asks our application for [TwiML
         instructions](//www.twilio.com/docs/api/twiml). Our TwiML instructs
         Twilio to connect the user to our sales or support teams.

      ## What We Will Learn

      This How-To demonstrates how to initialize a call using the [Twilio REST
      API](//www.twilio.com/docs/api/rest) and how to create a TwiML call logic using the
      [Say](//www.twilio.com/docs/api/twiml/say) verb.

      Sounds like a plan? Let's get started!

      ---

      **See Also:**
      * [Twilio REST API](//www.twilio.com/docs/api/rest)
      * [TwiML Say Verb](//www.twilio.com/docs/api/twiml/say)

  .step(data-title='Environment', data-file='ClickToCall.Web/Web.config', data-highlight="19-21", data-mode="xml")
    :markdown
      ## Environment

      To get started you should create a Local.config file under the
      `ClickToCall.Web/` directory with the following content:

      ```xml
        <?xml version="1.0" encoding="utf-8"?>
        <appSettings>
          <add key="TwilioAccountSID" value="your_account_SID" />
          <add key="TwilioAuthToken" value="your_twilio_auth_token" />
          <add key="TwilioNumber" value="your_twilio_number" />
        </appSettings>
      ```
      You can find your Twilio credentials in your [Account Dashboard](/console).

      For more instructions on how to run the application refer to the [app's
      README]('//github.com/TwilioDevEd/clicktocall-csharp').

      Now let's look at how we build our click-to-call app.

  .step(data-file='ClickToCall.Web/Views/CallCenter/Index.cshtml', data-mode="html", data-highlight="24-45")
    :markdown
      ## The Web Form

      The first step to create a real click-to-call solution is by building the
      form that your user needs to fill on the web. No need to overthink this,
      the real goal is to _POST_ the user's and sales team's phone numbers to
      your controller.

      So what information does this form need?

      * An input for the phone number
      * An input for the sales team number
      * A submit button

      Since the page
      doesn't need to render new content after clicking, we decided to implement
      the _POST_ action via AJAX using jQuery. Let's take a look at it.

  .step(data-file='ClickToCall.Web/Scripts/app.js', data-highlight="10-28")
    :markdown
      ## Submitting the Form

      To make the user's experience click to call feature more pleasant, we used
      AJAX to send the form asynchronously. This code shows one way you could
      implement this functionality using jQuery.

      This code does the following:

      * Watches for the user "submitting" the form element
      * Submits the form's data to our controller
      * Lets the user know if the submission was successful or not

      This is a common implementation of jQuery's `jQuery.post()` method. Notice
      that we are returning the response message when the call has connected.

      Now that we have the front end done lets build the back end that will
      receive this data and call the user.

      ---

      **See Also:**

      * [AJAX](//developer.mozilla.org/en-US/docs/AJAX)
      * [jQuery](//jquery.org)

  .step(
    data-file='ClickToCall.Web/Controllers/CallCenterController.cs',
    data-highlight="30-50")
    :markdown
      ## Outbound Call Route

      Back on the server, we define a route that handles HTTP POST requests to
      the `/Call` URL. This is the code that we're calling via our AJAX
      request in the browser. It will be responsible for placing the outbound
      call.

      Before we place the call we check that the POST data is valid, which
      requires our `CallViewModel` has a user number and a sales number, both
      present.

      Next we'll use the REST API to [make an outgoing phone
      call](/docs/api/rest/making-calls) which requires we pass it a **From
      number**, a **To number** and the [URL
      Parameter](/docs/api/rest/making-calls#url-parameter) `uriHandler` that
      tells Twilio what to do after it connects the call to our customer.

      **See Also:**

      * [Twilio .NET Helper Library](//github.com/twilio/twilio-csharp)

  .step(data-file='ClickToCall.Web/Controllers/CallController.cs', data-highlight="21-38")
    :markdown
      ## TwiML Route

      The first thing we do is validate that the incoming request is coming from
      Twilio. For this we'll use a Twilio Validation Service implemented by us
      using the Twilio .NET Helper Library's `RequestValidator` class.

      TwiML is a set of [simple verbs][simple-verbs] written in XML that Twilio reads
      as instructions. In this case our instructions inform Twilio to [SAY][say]
      something to the user and then [DIAL][dial] the support agent's number so
      the customer can talk to him/her.

      Twilio expects instructions in TwiML, a set of [simple
      verbs][simple-verbs] that Twilio understands. Luckily all of the helper
      libraries have methods that generate TwiML for you. In this case, we use
      Twilio .NET Helper Library's to create a TwiML response.

      [say]: //www.twilio.com/docs/api/twiml/say
      [dial]: //www.twilio.com/docs/api/twiml/dial
      [simple-verbs]: /docs/api/twiml#verbs

  .step(data-title='Where to Next?')
    :markdown
      ## Where to Next?

      Congrats! You just learned how to build a working Click-to-Call solution.
      To improve upon this you could add [Two-Factor
      Authentication][two-factor-authentication] to your app, or create an
      [Automated Survey][automated-survey] to follow-up with your customer.

      If you're a .NET developer working with Twilio, you might enjoy these
      other tutorials:

      * [**Appointment Reminders**][appointment-reminders] - automate the
      process of reaching out to your customers in advance of an upcoming
      appointment.

      * [**Automated Survey**][automated-survey] - instantly collect structured
      data from your customers with a survey conducted over a voice call or SMS
      text messages.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback
      to share with us, we'd love to hear it.
      [Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com) to let us know what you think.

      [two-factor-authentication]: //www.twilio.com/docs/howto/walkthrough/two-factor-authentication/csharp/mvc
      [automated-survey]: //www.twilio.com/docs/howto/walkthrough/automated-survey/csharp/mvc
      [appointment-reminders]: //www.twilio.com/docs/tutorials/walkthrough/appointment-reminders/csharp/mvc

